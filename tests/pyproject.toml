[project]
name = "htty-test-env"
version = "0.1.0"
description = "Test environment for htty wheel testing - dependency specification only"
requires-python = ">=3.8"

# Test dependencies only - htty will be provided by htty-pylib
dependencies = [
    "pytest>=7.0",
    "fawltydeps", # For dependency analysis of all workspaces
    "pyright", # For type checking all workspaces
    "pdoc",
]

# Build system configuration to prevent setuptools from treating test directories as packages
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Explicitly specify what to include - just the pyproject.toml and conftest.py, no test directories as packages
[tool.hatch.build.targets.wheel]
sources = []
packages = []
include = [
    "pyproject.toml",
    "conftest.py"
]

[dependency-groups]
analysis = [
    "fawltydeps",
]

[tool.pytest.ini_options]
# Only look for tests in the current directory (tests/)
testpaths = ["."]
python_files = "test_*.py"
# Ignore common directories that shouldn't contain tests
norecursedirs = [
    "result",
    ".git", 
    "target",
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    ".venv",
    ".direnv"
]
# Keep live logging enabled for debugging hanging tests
log_cli = true
log_cli_level = "WARNING"  # Only show warnings and errors by default
log_cli_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
log_auto_indent = true
# Custom marks for different test environments
markers = [
    "core: tests that need only htty-core (Rust binary + minimal Python bindings)",
    "wheel: tests that verify htty-core-wheel package produces correct Python wheel",
    "sdist: tests that verify htty-sdist package produces correct source distribution",
    "htty: tests that verify htty package contains expected files and binaries",
    "empty: tests that verify pytest-empty environment has no htty packages", 
    "cli: tests that verify pytest-cli environment has CLI tools but no Python module"
]

# [[[cog
# # Insert common ruff configuration
# import os
# ruff_config = os.environ["HTTY_COMMON_RUFF_TOML"]
# 
# cog.outl("[tool.ruff]")
# for line in ruff_config.splitlines():
#     cog.outl(line)
# ]]]
[tool.ruff]
line-length = 120

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "UP",  # pyupgrade
    "B" ,  # flake8-bugbear
    "SIM", # flake8-simplify
]

fixable = ["ALL"]

[lint.per-file-ignores]
"__init__.py" = ["E501"]

[lint.isort]
known-first-party = ["htty"]
force-single-line = false
combine-as-imports = true
# [[[end]]]

[tool.pyright]
include = ["tests"]
# [[[cog
# # Insert common pyright configuration
# import os
# pyright_config = os.environ["HTTY_COMMON_PYRIGHT_TOML"]
# 
# for line in pyright_config.splitlines():
#     cog.outl(line)
# ]]]
exclude = [
    "**/__pycache__",
    "**/.*",
    "**/.git",
    "**/node_modules",
    "**/venv",
    "**/result",
    "**/target",
    "**/dist",
    "**/build",
    "nix/**",
    "py-envs/**",
]
typeCheckingMode = "strict"
reportMissingTypeStubs = "error"
reportUnknownMemberType = "error"
reportUnknownArgumentType = "error"
reportUnknownVariableType = "error"
reportUnknownParameterType = "error"
reportMissingParameterType = "error"
reportMissingReturnType = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
# [[[end]]]
