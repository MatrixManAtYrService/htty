name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-store
          restore-prefixes-first-match: nix-store
          # Collect garbage until store is at most 8GB before saving cache
          gc-max-store-size: 8G

      - name: Run full checklist on main branch
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: nix run .#checklist-full -- -v

      - name: Run release checklist on tag
        if: startsWith(github.ref, 'refs/tags/')
        run: nix run .#checklist-release -- -v

  build-wheels:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            system: x86_64-linux
          - os: ubuntu-latest-arm
            system: aarch64-linux
          - os: macos-13
            system: x86_64-darwin
          - os: macos-latest
            system: aarch64-darwin
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-store
          restore-prefixes-first-match: nix-store
          # Collect garbage until store is at most 8GB before saving cache
          gc-max-store-size: 8G

      - name: Build wheel with Nix
        run: nix build .#htty-wheel

      - name: Copy wheel and verify bundled binary
        run: |
          # Copy the wheel using the filename from the build
          WHEEL_NAME=$(cat result/wheel-filename.txt)
          cp "result/$WHEEL_NAME" ./
          
          # Show wheel size (should be ~1.5MB with bundled binary)
          echo "üì¶ Wheel size:"
          ls -lh "$WHEEL_NAME"
          
          # Get wheel size in bytes for validation
          WHEEL_SIZE=$(stat -f%z "$WHEEL_NAME" 2>/dev/null || stat -c%s "$WHEEL_NAME" 2>/dev/null || echo "0")
          echo "üì¶ Wheel size: $WHEEL_SIZE bytes"
          
          # Verify wheel is large enough (should be > 1MB with bundled binary)
          if [ "$WHEEL_SIZE" -lt 1048576 ]; then
            echo "‚ùå ERROR: Wheel is too small ($WHEEL_SIZE bytes), likely missing bundled binary"
            exit 1
          fi
          
          # Verify the wheel contains the bundled ht binary
          echo "üîç Verifying wheel contents..."
          if python3 -m zipfile -l "$WHEEL_NAME" | grep -E "_bundled/ht$"; then
            echo "‚úÖ Found bundled ht binary in wheel"
          else
            echo "‚ùå ERROR: No bundled ht binary found in wheel!"
            echo "üìã Wheel contents:"
            python3 -m zipfile -l "$WHEEL_NAME"
            exit 1
          fi
          
          # Check ht binary size within the wheel
          HT_SIZE=$(python3 -c "import zipfile; z=zipfile.ZipFile('$WHEEL_NAME','r'); print(next((info.file_size for info in z.infolist() if info.filename.endswith('_bundled/ht')), 0)); z.close()")
          
          echo "üîß ht binary size in wheel: $HT_SIZE bytes"
          if [ "$HT_SIZE" -lt 1048576 ]; then
            echo "‚ùå ERROR: ht binary is too small ($HT_SIZE bytes)"
            exit 1
          fi
          
          echo "‚úÖ Wheel verification passed - contains properly bundled ht binary"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.system }}
          path: "*.whl"

  publish-to-pypi:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-wheels
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Create packages directory
        run: mkdir -p packages/

      - name: Build source distribution
        run: |
          nix build .#htty-sdist
          cp result/*.tar.gz packages/

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: packages/
          merge-multiple: true

      - name: Verify all packages before publishing
        run: |
          echo "üì¶ Packages to be published:"
          ls -la packages/
          
          echo ""
          echo "üîç Verifying all wheel contents..."
          
          WHEEL_COUNT=0
          FAILED_WHEELS=0
          
          for wheel in packages/*.whl; do
            if [ ! -f "$wheel" ]; then
              continue
            fi
            
            WHEEL_COUNT=$((WHEEL_COUNT + 1))
            echo ""
            echo "üì¶ Checking $(basename "$wheel"):"
            
            # Check wheel size
            WHEEL_SIZE=$(stat -f%z "$wheel" 2>/dev/null || stat -c%s "$wheel" 2>/dev/null || echo "0")
            echo "   Size: $WHEEL_SIZE bytes ($(echo "scale=1; $WHEEL_SIZE/1024/1024" | bc -l 2>/dev/null || echo "?") MB)"
            
            # Verify wheel contains bundled binary
            if python3 -m zipfile -l "$wheel" | grep -E "_bundled/ht$" >/dev/null; then
              # Get ht binary size
              HT_SIZE=$(python3 -c "import zipfile; z=zipfile.ZipFile('$wheel','r'); print(next((info.file_size for info in z.infolist() if info.filename.endswith('_bundled/ht')), 0)); z.close()")
              echo "   ‚úÖ Contains bundled ht binary ($HT_SIZE bytes)"
              
              # Verify sizes are reasonable
              if [ "$WHEEL_SIZE" -lt 1048576 ]; then
                echo "   ‚ùå ERROR: Wheel too small ($WHEEL_SIZE bytes)"
                FAILED_WHEELS=$((FAILED_WHEELS + 1))
              elif [ "$HT_SIZE" -lt 1048576 ]; then
                echo "   ‚ùå ERROR: ht binary too small ($HT_SIZE bytes)"
                FAILED_WHEELS=$((FAILED_WHEELS + 1))
              fi
            else
              echo "   ‚ùå ERROR: Missing bundled ht binary!"
              FAILED_WHEELS=$((FAILED_WHEELS + 1))
            fi
          done
          
          echo ""
          echo "üìä Verification Summary:"
          echo "   Total wheels: $WHEEL_COUNT"
          echo "   Failed wheels: $FAILED_WHEELS"
          
          if [ "$FAILED_WHEELS" -gt 0 ]; then
            echo ""
            echo "‚ùå FAILED: $FAILED_WHEELS wheel(s) are missing bundled binaries or have other issues"
            echo "Cannot publish to PyPI - wheels would be broken"
            exit 1
          fi
          
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo ""
            echo "‚ùå FAILED: No wheels found to publish"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ All $WHEEL_COUNT wheel(s) verified successfully - ready for PyPI publication"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packages/ 