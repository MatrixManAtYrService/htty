name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-store
          restore-prefixes-first-match: nix-store
          # Collect garbage until store is at most 8GB before saving cache
          gc-max-store-size: 8G

      - name: Run full checklist on main branch
        if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: nix run .#checklist-full -- -v

      - name: Run release checklist on tag
        if: startsWith(github.ref, 'refs/tags/')
        run: nix run .#checklist-release -- -v

  build-wheels:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}${{ matrix.arch && format('-{0}', matrix.arch) || '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-store
          restore-prefixes-first-match: nix-store
          # Collect garbage until store is at most 8GB before saving cache
          gc-max-store-size: 8G

      - name: Build wheel with Nix
        run: nix build .#htty-wheel

      - name: Copy wheel
        run: |
          # Copy the wheel using the filename from the build
          WHEEL_NAME=$(cat result/wheel-filename.txt)
          cp "result/$WHEEL_NAME" ./

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}
          path: "*.whl"

  publish-to-pypi:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-wheels
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Create packages directory
        run: mkdir -p packages/

      - name: Build source distribution
        run: |
          nix build .#htty-sdist
          cp result/*.tar.gz packages/

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: packages/
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packages/ 