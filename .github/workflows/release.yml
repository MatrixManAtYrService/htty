name: Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Perform a dry run (build wheels but do not publish)'
        type: boolean
        default: false

jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - matching polars deployment targets
          - os: ubuntu-latest
            system: x86_64-linux
            build_type: native
          - os: ubuntu-latest
            system: aarch64-linux
            build_type: cross-compiled
            
          # macOS builds - matching polars deployment targets
          - os: macos-13  # Intel - matches polars' macosx_10_12_x86_64
            system: x86_64-darwin
            build_type: native
          - os: macos-latest  # ARM64 - matches polars' macosx_11_0_arm64  
            system: aarch64-darwin
            build_type: native
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for cross-compilation
        if: matrix.build_type == 'cross-compiled'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Setup Nix
        uses: ./.github/actions/setup-nix

      - name: Build wheel
        run: |
          echo "üî® Building ${{ matrix.system }} wheel (${{ matrix.build_type }})"
          
          if [ "${{ matrix.build_type }}" = "cross-compiled" ]; then
            echo "Cross-compiling from $(nix eval --impure --expr 'builtins.currentSystem') to ${{ matrix.system }}"
            nix build --impure --expr '
              let
                flake = builtins.getFlake (toString ./.);
                pkgs = import flake.inputs.nixpkgs { system = builtins.currentSystem; };
              in
                pkgs.callPackage ./nix/packages/htty-wheel.nix {
                  inputs = flake.inputs;
                  targetSystem = "${{ matrix.system }}";
                }
            '
          else
            echo "Building native wheel for ${{ matrix.system }}"
            nix build .#htty-wheel
          fi

      - name: Test cross-compiled wheel
        if: matrix.build_type == 'cross-compiled'
        run: |
          echo "üß™ Testing cross-compiled wheel in target platform container"
          WHEEL_NAME=$(cat result/wheel-filename.txt)
          
          # Copy wheel to current directory for Docker access
          cp "result/$WHEEL_NAME" ./
          
          docker run --rm --platform linux/arm64 \
            -v "$(pwd):/test" \
            python:3.11-slim \
            bash -c "
              echo 'üîß Installing cross-compiled wheel...' && \
              pip install /test/$WHEEL_NAME && \
              echo '‚úÖ Installation successful' && \
              \
              echo 'üîß Testing Python import...' && \
              python -c 'import htty; print(\"‚úÖ Import successful\")' && \
              \
              echo 'üîß Checking bundled binary exists...' && \
              python -c 'import htty; import os; ht_path = os.path.join(os.path.dirname(htty.__file__), \"bin\", \"ht\"); print(f\"Binary at: {ht_path}\"); print(f\"Exists: {os.path.exists(ht_path)}\"); print(f\"Executable: {os.access(ht_path, os.X_OK) if os.path.exists(ht_path) else False}\")' && \
              \
              echo 'üîß Checking binary architecture...' && \
              python -c 'import htty; import os, subprocess; ht_path = os.path.join(os.path.dirname(htty.__file__), \"bin\", \"ht\"); result = subprocess.run([\"file\", ht_path], capture_output=True, text=True); print(f\"Architecture: {result.stdout.strip()}\")' && \
              \
              echo 'üîß Testing CLI availability (htty-ht console script should exist)...' && \
              which htty-ht > /dev/null && echo '‚úÖ htty-ht console script found' || echo '‚ùå htty-ht console script missing' && \
              \
              echo 'üéâ Cross-compiled wheel validation complete!' && \
              echo 'üìù Binary built with portable toolchain (maturin/cargo)' && \
              echo '‚úÖ Should work on any compatible Linux system without Nix'
            "

      - name: Copy and verify wheel
        run: |
          WHEEL_NAME=$(cat result/wheel-filename.txt)
          cp "result/$WHEEL_NAME" ./
          
          echo "üì¶ Built wheel: $WHEEL_NAME"
          ls -lh "$WHEEL_NAME"
          
          if [ -f "result/target-system.txt" ]; then
            echo "üéØ Target system: $(cat result/target-system.txt)"
          fi

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.system }}
          path: "*.whl"

  publish-to-pypi:
    needs: build-wheels
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: ./.github/actions/setup-nix

      - name: Create packages directory
        run: mkdir -p packages/

      - name: Build source distribution
        run: |
          nix build .#htty-sdist
          cp result/*.tar.gz packages/

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: packages/
          merge-multiple: true

      - name: Verify packages for publication
        run: |
          echo "üì¶ Packages to be published:"
          ls -la packages/
          
          WHEEL_COUNT=$(ls packages/*.whl 2>/dev/null | wc -l)
          SDIST_COUNT=$(ls packages/*.tar.gz 2>/dev/null | wc -l)
          
          echo "   Wheels: $WHEEL_COUNT"
          echo "   Source distributions: $SDIST_COUNT"
          
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "‚ùå ERROR: No wheels found"
            exit 1
          fi
          
          if [ "$SDIST_COUNT" -eq 0 ]; then
            echo "‚ùå ERROR: No source distribution found"
            exit 1
          fi
          
          echo "‚úÖ All packages ready for publication"

      - name: Publish to PyPI
        if: ${{ !inputs.dry-run }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packages/

      - name: Dry run complete
        if: ${{ inputs.dry-run }}
        run: |
          echo "üèÅ Dry run complete - packages built but not published"
          echo "To publish for real, create a release tag or run workflow without dry-run" 