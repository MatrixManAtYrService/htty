name: Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Perform a dry run (build wheels but do not publish)'
        type: boolean
        default: false

jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - matching polars deployment targets
          - os: ubuntu-latest
            system: x86_64-linux
            build_type: native
          - os: ubuntu-latest
            system: aarch64-linux
            build_type: cross-compiled
            
          # macOS builds - matching polars deployment targets
          - os: macos-13  # Intel - matches polars' macosx_10_12_x86_64
            system: x86_64-darwin
            build_type: native
          - os: macos-latest  # ARM64 - matches polars' macosx_11_0_arm64  
            system: aarch64-darwin
            build_type: native
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for cross-compilation
        if: matrix.build_type == 'cross-compiled'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Setup Nix
        uses: ./.github/actions/setup-nix

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.build_type == 'cross-compiled' && matrix.system == 'aarch64-linux' && 'aarch64-unknown-linux-gnu' || '' }}

      - name: Set Rust target for cross-compilation
        if: matrix.build_type == 'cross-compiled'
        id: rust-target
        run: |
          if [ "${{ matrix.system }}" = "aarch64-linux" ]; then
            echo "target=aarch64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          else
            echo "target=${{ matrix.system }}" >> $GITHUB_OUTPUT
          fi

      - name: Build wheel with maturin (Polars approach)
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.build_type == 'cross-compiled' && steps.rust-target.outputs.target || '' }}
          args: --release --out dist
          # Use manylinux 2_24 for aarch64 like Polars
          manylinux: ${{ matrix.system == 'aarch64-linux' && '2_24' || 'auto' }}
          before-script-linux: |
            # Get ht source and build it
            HT_SOURCE=$(nix eval --impure --raw --expr '(builtins.getFlake (toString ./.)).inputs.ht.outPath')
            echo "üìÅ ht source: $HT_SOURCE"
            
            # Copy and build ht binary
            cp -r "$HT_SOURCE" ./ht-source
            chmod -R u+w ./ht-source
            cd ./ht-source
            
            if [ "${{ matrix.build_type }}" = "cross-compiled" ]; then
              echo "üîÄ Cross-compiling ht for ${{ steps.rust-target.outputs.target }}"
              cargo build --release --target ${{ steps.rust-target.outputs.target }}
              HT_BINARY="target/${{ steps.rust-target.outputs.target }}/release/ht"
            else
              echo "üè† Building ht natively"
              cargo build --release
              HT_BINARY="target/release/ht"
            fi
            
            # Bundle the ht binary
            cd ..
            mkdir -p src/htty/_bundled
            cp "./ht-source/$HT_BINARY" src/htty/_bundled/ht
            chmod +x src/htty/_bundled/ht
            
            echo "‚úÖ Bundled ht binary:"
            file src/htty/_bundled/ht

      - name: Test wheel (native builds only)
        # Only test on native builds since cross-compiled wheels need target architecture
        if: matrix.build_type == 'native'
        run: |
          echo "üß™ Testing wheel installation and functionality"
          WHEEL_PATH=$(ls dist/*.whl | head -1)
          WHEEL_NAME=$(basename "$WHEEL_PATH")
          
          echo "üì¶ Installing wheel: $WHEEL_NAME"
          pip install --force-reinstall --verbose "$WHEEL_PATH"
          
          echo "üîß Testing Python import..."
          python -c 'import htty; print("‚úÖ Import successful")'
          
          echo "üîß Testing CLI availability..."
          htty --help > /dev/null && echo "‚úÖ htty CLI works"
          htty-ht --version > /dev/null && echo "‚úÖ htty-ht console script works"
          
          echo "üéâ Wheel testing complete!"

      - name: Verify wheel details
        run: |
          # Find the built wheel
          WHEEL_PATH=$(ls dist/*.whl | head -1)
          WHEEL_NAME=$(basename "$WHEEL_PATH")
          
          echo "üì¶ Built wheel: $WHEEL_NAME"
          echo "üìä Wheel size: $(ls -lh "$WHEEL_PATH" | awk '{print $5}')"
          echo "üéØ Target system: ${{ matrix.system }}"
          echo "üîÑ Build type: ${{ matrix.build_type }}"
          
          # Show wheel contents for debugging
          echo "üìã Wheel contents:"
          python -m zipfile -l "$WHEEL_PATH" | head -20

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.system }}
          path: "dist/*.whl"

  publish-to-pypi:
    needs: build-wheels
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: ./.github/actions/setup-nix

      - name: Create packages directory
        run: mkdir -p packages/

      - name: Build source distribution
        run: |
          nix build .#htty-sdist
          cp result/*.tar.gz packages/

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: packages/
          merge-multiple: true

      - name: Verify packages for publication
        run: |
          echo "üì¶ Packages to be published:"
          ls -la packages/
          
          WHEEL_COUNT=$(ls packages/*.whl 2>/dev/null | wc -l)
          SDIST_COUNT=$(ls packages/*.tar.gz 2>/dev/null | wc -l)
          
          echo "   Wheels: $WHEEL_COUNT"
          echo "   Source distributions: $SDIST_COUNT"
          
          if [ "$WHEEL_COUNT" -eq 0 ]; then
            echo "‚ùå ERROR: No wheels found"
            exit 1
          fi
          
          if [ "$SDIST_COUNT" -eq 0 ]; then
            echo "‚ùå ERROR: No source distribution found"
            exit 1
          fi
          
          echo "‚úÖ All packages ready for publication"

      - name: Publish to PyPI
        if: ${{ !inputs.dry-run }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: packages/

      - name: Dry run complete
        if: ${{ inputs.dry-run }}
        run: |
          echo "üèÅ Dry run complete - packages built but not published"
          echo "To publish for real, create a release tag or run workflow without dry-run" 