[project]
name = "htty_core"
# [[[cog
# import os
# cog.out(f'version = "{os.environ["HTTY_VERSION"]}"')
# ]]]
version = "0.2.28"
# [[[end]]]
description = "Headless Terminal - Rust binary for terminal automation"
readme = "README.md"
authors = [
    { name = "Matt Rixman", email = "MatrixManAtYrService@users.noreply.github.com" },
]
license = { text = "MIT" }
requires-python = ">=3.10"
keywords = ["terminal", "automation", "pty", "headless", "subprocess"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Rust",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
]

[project.urls]
Homepage = "https://github.com/MatrixManAtYrService/ht"
Documentation = "https://github.com/MatrixManAtYrService/ht"
Repository = "https://github.com/MatrixManAtYrService/ht"
Issues = "https://github.com/MatrixManAtYrService/ht/issues"

[build-system]
requires = ["maturin>=1.3.2"]
build-backend = "maturin"

[dependency-groups]
analysis = [
    "fawltydeps",
]

[tool.maturin]
python-source = "src/python"
strip = true
bindings = "bin"
auditwheel = "repair"
# Compatibility handled by maturin-action in CI
# Always build release builds
profile = "release"
include = [
    { path = "target/release/ht", format = "wheel" }
]

# [[[cog
# # Insert common ruff configuration
# import os
# ruff_config = os.environ["HTTY_COMMON_RUFF_TOML"]
# 
# cog.outl("[tool.ruff]")
# for line in ruff_config.splitlines():
#     cog.outl(line)
# ]]]
[tool.ruff]
line-length = 120

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "UP",  # pyupgrade
    "B" ,  # flake8-bugbear
    "SIM", # flake8-simplify
]

fixable = ["ALL"]

[lint.per-file-ignores]
"__init__.py" = ["E501"]

[lint.isort]
known-first-party = ["htty"]
force-single-line = false
combine-as-imports = true
# [[[end]]]

[tool.pyright]
include = ["htty-core/src/python"]
# [[[cog
# # Insert common pyright configuration
# import os
# pyright_config = os.environ["HTTY_COMMON_PYRIGHT_TOML"]
# 
# for line in pyright_config.splitlines():
#     cog.outl(line)
# ]]]
exclude = [
    "**/__pycache__",
    "**/.*",
    "**/.git",
    "**/node_modules",
    "**/venv",
    "**/result",
    "**/target",
    "**/dist",
    "**/build",
    "nix/**",
    "py-envs/**",
]
typeCheckingMode = "strict"
reportMissingTypeStubs = "error"
reportUnknownMemberType = "error"
reportUnknownArgumentType = "error"
reportUnknownVariableType = "error"
reportUnknownParameterType = "error"
reportMissingParameterType = "error"
reportMissingReturnType = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
# [[[end]]]